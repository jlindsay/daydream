#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('daydream:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * socket.io code is below
 */

//npm i socket.io-encrypt
var encrypt = require('socket.io-encrypt')

var io  = require('socket.io')(server);
//encrypt('secret')(socket)

var _um = require('../server/UserManager')


io.on('connection', function(socket){

  var addedUser = false;


  var chatID = socket.id
  console.log("chatID:", chatID)

  // Chatroom
  var numUsers = 0;

  // when the client emits 'new message', this listens and executes
  socket.on('new-message', function(data){
      // we tell the client to execute 'new message'
      data.userid = socket.userid;
      socket.broadcast.emit('new-message', data );
  });

  // when the client emits 'add user', this listens and executes
  socket.on('add-user', function(user){
    if (addedUser) return;

    var chatID = socket.id
    console.log("user:", user.userid, ", chatID:", chatID)

    // we store the username in the socket session for this client
    socket.user = user;

    ++numUsers;

    addedUser = true;

    socket.emit('login', {
        user     : user,
        numUsers : numUsers
    });

    // echo globally (all clients) that a person has connected
    socket.broadcast.emit('user-joined', {
        user     : socket.user,
        numUsers : numUsers
    });
  });

  // when the client emits 'typing', we broadcast it to others
  socket.on('typing', function(){
    socket.broadcast.emit('typing', {
        user: socket.user
    });
  });

  // when the client emits 'stop typing', we broadcast it to others
  socket.on('stop-typing', function(){
    socket.broadcast.emit('stop-typing', {
        user: socket.user
    });
  });

  // when the user disconnects.. perform this
  socket.on('disconnect', function(){
    if (addedUser) {
      --numUsers;

      // echo globally that this client has left
      socket.broadcast.emit('user-left', {
          user      : socket.user,
          numUsers  : numUsers
      });
    }
  });
});
